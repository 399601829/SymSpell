<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SoftWx.Diagnostics</name>
    </assembly>
    <members>
        <member name="T:SoftWx.Diagnostics.Bench">
            <summary>
            Tools for benchmarking code. The Bench class helps do timing benchmarks, and
            also object size determiniation. 
            </summary>
            <remarks> When using this, you should be using a release build (i.e.
            optimizations enabled) and be running WITHOUT the debugger attached to get
            the most accurate and comparable results. This measures clock time, not CPU
            time (it uses StopWatch), so some variability of times from run to run should
            be expected depending on what other things are going on in the machine, and
            within the .Net runtime. Code that times under 20 nanoseconds should be
            repeated in the Action method at least 5 to 10 times for accurate results.
            
            The Time benchmarking attempts to take into account the amount of time that is 
            overhead from the timing process, and removes that overhead time from the 
            results to give more accurate timing info for the code being benchmarked.
            
            Using the Pause/Resume feature of the TimeControl should be used with caution.
            Although Bench attempts to remove the overhead associated with pausing and
            resuming the timer, when used in loops timing operations taking small amounts 
            of time (under a microsecond), it will reduce accuracy, possibly by a relatively
            large amount. The pause/resume feature is intended for use when timing a block 
            of code that will take more than a micrisecond, but requires some setup you want
            to exclude from the results. An example would be pausing to populate a list, 
            and then resuming to time for accessing all the items in the list.
            </remarks>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.MinIterations">
            <summary>Gets or sets the minimum number of times the Target method is called.</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.MinMilliseconds">
            <summary>Gets or sets the minimum amount of time the Target method is benchmarked.
            This minimum benchmarking time is the time of your method, plus any overhead, so
            your timing results may show an elapsed time less than this minimum because of
            removal of overhead time from the results.</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.WriteToConsole">
            <summary>Gets or sets the flag for whether the Bench Time method writes the 
            TimeResult to the Console.</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.#ctor(System.Int64,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of Bench.
            </summary>
            <param name="minIterations">Minimum number of times the Target method is called.</param>
            <param name="minMilliseconds">Minimum amount of time the Target method is benchmarked.</param>
            <param name="writeToConsole">Indicates whether the Bench Time method writes the
            TimeResult to the Console.</param>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.Time(System.String,System.Action,System.Int32)">
            <summary>
            Benchmarks the execution time of the specified target method.
            </summary>
            <remarks>Use this to time target methods that don't require use
            of TimeControl to pause/resume the timer.</remarks>
            <param name="name">Descriptive name of target being timed.</param>
            <param name="target">The Action to be benchmarked.</param>
            <param name="repsInTarget">The number of times the operation(s) to be timed
            are repeated in the Action (default is 1).</param>
            <returns>TimeResult with the benchmark results.</returns>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.Time(System.String,System.Action{SoftWx.Diagnostics.Bench.TimeControl},System.Int32)">
            <summary>
            Benchmarks the execution time of the specified target method.
            </summary>
            <remarks>Use this to time target methods that want the use
            of TimeControl to pause/resume the timer.</remarks>
            <param name="name">Descriptive name of target being timed.</param>
            <param name="target">The Action to be benchmarked.</param>
            <param name="repsInTarget">The number of times the operation(s) to be timed
            are repeated in the Action (default is 1).</param>
            <returns>TimeResult with the benchmark results.</returns>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.ByteSize``1(System.Func{``0})">
            <summary>
            Determines the size of the object or struct created and returned by the
            specified method. </summary>
            <remarks>Should not be used in production! This is meant for use during
            development, not as a general purpose sizeof function.</remarks>
            <param name="maker">The method that creates and returns the object or 
            struct whose size will be determined.</param>
            <returns>The size in bytes of the object created by the method.</returns>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.ByteSizeDescription``1(System.Func{``0})">
            <summary>
            Returns a string describing details about the size of the object or struct
            created by the specified method.
            </summary>
            <remarks>Should not be used in production! This is meant for use during
            development, not as a general purpose sizeof function.</remarks>
            <param name="maker">The method that creates and returns the object or struct
            whose size will be determined.</param>
            <returns>String describing details about the size of an object.</returns>
        </member>
        <member name="T:SoftWx.Diagnostics.Bench.TimeControl">
            <summary>
            Allows control of what portions of the method are benchmarked, by
            pausing and resuming the timing through the TimeControl.
            </summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeControl.#ctor">
            <summary>Creates a new instance of TimeControl.</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeControl.Pause">
            <summary>Pauses the timing.</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeControl.Resume">
            <summary>Resumes the timing.</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeControl.Reset">
            <summary>Reset the underlying Stopwatch.</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeControl.Start">
            <summary>Start the underlying Stopwatch.</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeControl.Stop">
            <summary>Stop the underlying Stopwatch.</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeControl.Elapsed">
            <summary>Returns the elapsed time, adjusted for pause/return overhead.</summary>
        </member>
        <member name="T:SoftWx.Diagnostics.Bench.TimeResult">
            <summary>Results of benchmark timing.</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeResult.#ctor(System.String,System.Int64,System.TimeSpan)">
            <summary>Creates a new TimeResult with the specified values.</summary>
            <param name="name">Descriptive name of target associated with the TimeResult.</param>
            <param name="operations">The total number of operations.</param>
            <param name="elapsed">The execution time as a TimeSpan.</param>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeResult.Name">
            <summary>Descriptive name of target associated with the TimeResult.</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeResult.Operations">
            <summary>The total number of operations that were timed.</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeResult.ElapsedMilliseconds">
            <summary>The execution time in milliseconds.</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeResult.Elapsed">
            <summary>The execution time as a TimeSpan.</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeResult.NanosecondsPerOperation">
            <summary>The computed time in nanoseconds of a single execution of the 
            inner body of the method (if using a count with loop, this is the time 
            of one execution of the contents of the loop).</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeResult.MicrosecondsPerOperation">
            <summary>The computed time in microseconds of a single execution of the
            inner body of the method (if using a count with loop, this is the time 
            of one execution of the contents of the loop).</summary>
        </member>
        <member name="P:SoftWx.Diagnostics.Bench.TimeResult.MillisecondsPerOperation">
            <summary>The computed time in milliseconds of a single execution of the
            inner body of the method (if using a count with loop, this is the time 
            of one execution of the contents of the loop).</summary>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeResult.ToString">
            <summary>Gets a string representation of the TimeResult.</summary>
            <returns>A string representation of the TimeResult.</returns>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeResult.ToString(System.Boolean)">
            <summary>Gets a string representation of the TimeResult.</summary>
            <returns>A string representation of the TimeResult.</returns>
        </member>
        <member name="M:SoftWx.Diagnostics.Bench.TimeResult.CompareTo(SoftWx.Diagnostics.Bench.TimeResult)">
            <summary>
            Compares the current TimeResult with another TimeResult, using
            MillisecondsPerOperation as the basis of the comparison.
            </summary>
            <param name="other">A TimeResult to compare with this TimeResult.</param>
            <returns>A value that indicates the relative order of the objects being compared:
            zero if the two are equal, greater than zero if this TimeResult is greater than 
            the other, or less than zero if this TimeResult is less than the other.</returns>
        </member>
    </members>
</doc>
